<?xml version="1.0" encoding="UTF-8" ?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>CICDdemo</groupId>
  <artifactId>CICDDemo</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>sar</packaging>
  <parent>
    <groupId>com.oracle.soa</groupId>
    <artifactId>sar-common</artifactId>
    <version>12.2.1-3-0</version>
    <relativePath></relativePath>
  </parent>
  
  <properties>
    <!--Cuando usamos el goal deploy, este sera el repo al que enviaremos el artefacto-->
    <settingsXmlServerId>snapshots</settingsXmlServerId>
    <!--Para llegar al goal deploy se tiene que pasar por verify. Verify dispara el goal test
    del plugin soa. Este goal del plugin soa require que se especifique este archivo de 
    propiedades con los datos del servidor. Lanza la ejecuciÃ³n de los test SOA-->
    <jndi.properties.input>AdminServer.properties</jndi.properties.input>
    <!-- These parameters are used by the compile goal -->
    <scac.input.dir>
      ${project.basedir}/SOA/
    </scac.input.dir>
    <scac.output.dir>
      ${project.basedir}/target
    </scac.output.dir>
    <scac.input>
      ${scac.input.dir}/composite.xml
    </scac.input>
    <scac.output>
      ${scac.output.dir}/out.xml
    </scac.output>
    <scac.error>
      ${scac.output.dir}/error.txt
    </scac.error>
    <scac.displayLevel>
      1
    </scac.displayLevel>
    <!-- if you are using a config plan, uncomment the following line and update to point
             to your config plan -->
    <!--<configplan>${scac.input.dir}/configplan.xml</configplan>-->
    <!-- These parameters are used by the deploy and undeploy goals -->
    <composite.name>
      ${project.artifactId}
    </composite.name>
    <composite.revision>
      1.0
    </composite.revision>
    <composite.partition>
      default
    </composite.partition>
<!-- Vamos a especificar estos valores en el perfil (ver abajo)
    <serverUrl>
      ${oracleServerUrl}
    </serverUrl>
    <user>
      ${oracleUsername}
    </user>
    <password>
      ${oraclePassword}
    </password>
    -->
    <overwrite>
      true
    </overwrite>
    <forceDefault>
      true
    </forceDefault>
    <regenerateRulebase>
      false
    </regenerateRulebase>
    <keepInstancesOnRedeploy>
      false
    </keepInstancesOnRedeploy>
    <!-- These parameters are used by the test goal 
         if you are using the sca-test (test) goal, you need to uncomment the following
             line and point it to your jndi.properties file. -->
    <!--<jndi.properties.input>UNDEFINED</jndi.properties.input>-->
    <scatest.result>
      ${scac.output.dir}/testResult
    </scatest.result>
    <!--  input is the name of the composite to run test suties against -->
    <input>
      ${project.artifactId}
    </input>
    <!--<scac.ant.buildfile>${env.MW_HOME}/soa/bin/ant-sca-compile.xml</scac.ant.buildfile>
        <sca.ant.testfile>${env.MW_HOME}/soa/bin/ant-sca-test.xml</sca.ant.testfile>
        -->
    <oracleHome>
      ${env.ORACLE_HOME}
    </oracleHome>
  </properties>
  
  <build>
    <plugins>
      <plugin>
        <groupId>com.oracle.soa.plugin</groupId>
        <artifactId>oracle-soa-plugin</artifactId>
        <version>12.2.1-3-0</version>
        <configuration>
          <compositeName>
            ${project.artifactId}
          </compositeName>
          <composite>
            ${scac.input}
          </composite>
          <sarLocation>
            ${scac.output.dir}/sca_${project.artifactId}_rev${project.version}.jar
          </sarLocation>
          <serverUrl>
            ${serverUrl}
          </serverUrl>
          <user>
            ${user}
          </user>
          <password>
            ${password}
          </password>
          <!-- Note: compositeRevision is needed to package, revision is needed to undeploy -->
          <compositeRevision>
            ${composite.revision}
          </compositeRevision>
          <revision>
            ${composite.revision}
          </revision>
          <scacInputDir>
            ${scac.input.dir}
          </scacInputDir>
          <input>
            ${input}
          </input>
        </configuration>
        <!-- extensions=true is needed to use the custom sar packaging type -->
        <extensions>true</extensions>
      </plugin>
      <plugin>
        <groupId>com.oracle.adf.plugin</groupId>
        <artifactId>ojdeploy</artifactId>
        <version>12.2.1-3-0</version>
        <configuration>
          <ojdeploy>
            ${oracleHome}/jdeveloper/jdev/bin/ojdeploy.exe
          </ojdeploy>
          <workspace>
            ${basedir}/../CICDdemo.jws
          </workspace>
          <project>
            CICDDemo
          </project>
          <profile>
            CICDDemo
          </profile>
          <outputfile>
            ${project.build.directory}/${project.build.finalName}.jar
          </outputfile>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>deploy</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Con este plugin vamos a leer propiedades de un archivo. 
      El plugin se ejecuta en la fase de inicializacion-->      
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>entornos.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Este plug in lo usamos para automatizar las prueba con SoapUI
      el se ejecuta en la fase integration-test, esto es, una vez se ha hecho
      el despliegue en el servidor
      NOTA: El proyecto SOAP UI esta hecho en la version 5.x.x y el plug in en la 4.6.1
      Resulta que en este cambio de versiones SOAPU UI espera en la 5 que se especifique
      la Authenticacion en el end point y no de forma global. Hemos pueso basic authentication
      en los casos de prueba dentro del proyecto soap ui, para que el plugin hecho en la 4.6.1
      no tenga problemas al entender el proyecto hecho en la 5. De lo contrario peta con un 
      error algo asi como que el valor Not Authenticated no es valido-->
      <plugin>
        <groupId>com.smartbear.soapui</groupId>
        <artifactId>soapui-maven-plugin</artifactId>
        <version>4.6.1</version>
        <configuration>
            <projectFile>ProcesaEco-soapui-project.xml</projectFile>
            <junitReport>true</junitReport>
            <outputFolder>target/junit-reports</outputFolder>
        </configuration>
        <executions>
          <execution>
              <phase>integration-test</phase>
              <goals>
                <goal>test</goal>
              </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  
  <description>Prueba de CI/CD</description>
  
  <dependencies>
    <dependency>
      <groupId>com.oracle.adf.library</groupId>
      <artifactId>SOA-Designtime</artifactId>
      <version>12.2.1-3-0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.adf.library</groupId>
      <artifactId>SOA-Runtime</artifactId>
      <version>12.2.1-3-0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.adf.library</groupId>
      <artifactId>BPEL-Runtime</artifactId>
      <version>12.2.1-3-0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.adf.library</groupId>
      <artifactId>Mediator-Runtime</artifactId>
      <version>12.2.1-3-0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.adf.library</groupId>
      <artifactId>MDS-Runtime</artifactId>
      <version>12.2.1-3-0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.adf.library</groupId>
      <artifactId>BC4J-Service-Runtime</artifactId>
      <version>12.2.1-3-0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.adf.library</groupId>
      <artifactId>JUnit-4-Runtime</artifactId>
      <version>12.2.1-3-0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
  </dependencies>
  
  <pluginRepositories>
    <pluginRepository>
        <id>smartbear-sweden-plugin-repository</id>
        <url>http://www.soapui.org/repository/maven2/</url>
    </pluginRepository> 
  </pluginRepositories>

  <distributionManagement>
      <repository>
          <id>central</id>
          <name>CPX-2E6TFHAEZVQ-releases</name>
          <url>http://localhost:8081/artifactory/libs-release</url>
      </repository>
      <snapshotRepository>
        <id>snapshots</id>
        <name>CPX-2E6TFHAEZVQ-snapshots</name>
        <url>http://localhost:8081/artifactory/libs-snapshot</url>
      </snapshotRepository>
  </distributionManagement>

<!-- Podemos comprobar cuales son LOS perfiles activos usando
mvn help:active-profiles

Si ejecutamos 
mvn -Dentorno=desarrollo help:active-profiles

NO SE ACTIVARA EL PERFILE, PORQUE LAS VARIABLES DEL PERFIL TIENEN QUE SER VARIABLES DE 
SISTEMA, NO PROPIEDADES DEL POM, Y ADEMAS TIENEN QUE TENER SU VALOR DEFINIDO AL ARRANCAR
MAVEN, NO DURANTE

PARA HABILITAR UN PERFIL:
mvn -Pdesarrollo help:active-profiles

Habilitaria el perfil de desarrollo

SI EJECUTAMOS MAVEN DESDE JENKINS, Y EL JOB ESTA PARAMETRIZADO CON LA PROPIEDAD entorno
ESTA SI ES UNA VARIABLE DE SISTEMA, Y FUNCIONARIA LA HABILITACION DEL PERFIL

-->
  <profiles>
    <profile>
      <id>desarrollo</id>
      <!-- Con esta propiedade activamos el perfil por defecto. Si ningun otro pefil
      cumple las condiciones de activacion, entonces el perfil con esta propiedad se activa
      Si por ejemplo tenemos el perfil P1, P2, P3, y Pdefault, y anotamos Pdefault con esto
      Si alguno de los P1, P2 o P3 se activa, Pdefault estara desactivo, pero en caso contrario
      Pdefault sera el activo
      <activation>
      <activeByDefault>true</activeByDefault>
      </activation>
      -->
      <properties>
      <!--Definimos las propiedades del pom con los valores especificados en el 
      archivo de propiedades (ver plugin de propiedades arriba)-->
        <serverUrl>
          ${dev.servidor}
        </serverUrl>
        <user>
          ${dev.usuario}
        </user>
        <password>
          ${dev.pass}
        </password>
      </properties>
    </profile>
    <profile>
      <id>sit</id>
      <properties>
        <serverUrl>
          ${sit.servidor}
        </serverUrl>
        <user>
          ${sit.usuario}
        </user>
        <password>
          ${sit.pass}
        </password>
      </properties>
    </profile>
  </profiles>
</project>
